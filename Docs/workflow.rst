.. _workflow:

Getting Started
===============
This short tutorial describes the main steps to get a practical example of Dispa-SET running.


Prerequisites
-------------
Install Python 2.7, with full scientific stack. The Anaconda_ distribution is recommended since it comprises all the required packages. If Anaconda is not used, the following libraries and their dependencies should be installed manually: 

* numpy
* pandas 
* matplotlib 
* pickle


This can be achieved using the pip installer (example for numpy)::

	pip install numpy
NB: For Windows users, some packages might require the installation of a C++ compiler for Python. This corresponds to the typical error message: "Unable to find vcvarsall.bat". This can be solved by installing the freely available "Microsoft Visual C++ Compiler for Python 2.7 ".  In some cases the path to the compiler must be added to the PATH windows environment variable (e.g. C:\Program Files\Common Files\Microsoft\Visual C++ for Python\9.0)


Using Dispa-SET with GAMS:
^^^^^^^^^^^^^^^^^^^^^^^^^^
Dispa-SET is primarily designed to run with GAMS and therefore requires GAMS to be installed with a valid user licence.

The GAMS api for python has been pre-compiled in the "Externals" folder and is usable with most operating systems (both 32 and 64 bits). If the pre-compiled binaries are not available or could not be loaded, the system exits with an error message. In that case, the gams python api should be compiled from the source provided in the GAMS installation folder (e.g. "C:\GAMS\win32\24.3\apifiles\Python\api")::

	python gdxsetup.py install
	python gamssetup.py install

The api requires the path to the gams installation folder. The "get_gams_path()" function of dispa-set performs a system search to automatically detect this path. It case it is not successful, the user is prompted for the proper installation path. 

Using Dispa-SET with PYOMO:
^^^^^^^^^^^^^^^^^^^^^^^^^^^
NB: in the current Dispa-SET distribution, the PYOMO solver is outdated and should not be used.

* Install pyomo ::

	pip install pyomo
* Install a solver and add it to the PATH environment variable (e.g. if cplex is installed, the "cplex" command should be callable from any command prompt).


Run the pre-processing tool
---------------------------

1. Check the configuration file
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Dispa-SET runs are defined in dedicated excel configuration files stored in the "ConfigFiles" folder. The configuration file "ConfigTest.xlsx" has be setup for testing purposes. It generates a 10-days optimisation using data relative to the Dutch power system. 

2. Pre-processing
^^^^^^^^^^^^^^^^^
To run the pre-processing tool with this configuration file, 2 options are available:
* From the command line, specify the configuration file to be used as an argument. Within the "Dispa-SET" folder run::

	python DispaSET.py -b ConfigFiles/ConfigTest.xlsx

* From a python IDE (e.g. Spyder), specifying the configuration file. Configure the "DispaSet.py" file to be run with the command line option "-b ConfigFiles/ConfigTest.xlsx". The figure below shows the "Run Settings" dialog properly configure for Spyder.
.. image:: figures/spyder_config.png

* Without specification of the configuration file. In that case the pre-processing tool prompts the user for the path the configuration file, which should be provided as follows::

	ConfigFiles/ConfigTest.xlsx


3. Check the simulation environment
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
The simulation environment folder is defined in the configuration file. In the test example it is set to "Simulations/simulation_test". The simulation inputs are written in three different formats: excel (34 excel files), Python (Inputs.p) and GAMS (Inputs.gdx). 


Run the optimisation
--------------------

The optimisation can be run directly from the simulation environment folder generated by the pre-processing tool. Different options are available for that purpose:

Using the GAMS user interface:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
From the simulation folder (defined in the config file), the Dispa-SET model can be run following the instruction below: 

1. Through the UCM.gpr project file, open the UCM.h.gmx model file.
2. Run the model in GAMS.

The result file is written in the gdx format and stored in the Simulation folder, together with all input files.

Using the GAMS command line:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
GAMS can also be run from the command line (this is the only option for the Linux version).

1. Make sure that the gams binary is in the system PATH
2. From the simulation environment folder, run::

	gams UCM_h.gms


From Dispa-SET, using GAMS:
^^^^^^^^^^^^^^^^^^^^^^^^^^^
Using the GAMS api, the simulation can be started directly from the main DispaSet python file after the pre-processing phase. From the "Dispa-SET" folder, run::

	python DispaSet.py -br ConfigFiles/ConfigTest.xlsx

This generates the simulation environment, runs the optimisation, and stores the results in the same folder.


From Dispa-SET, using PYOMO:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
To be implemented.


Postprocessing
--------------
Various functions and tools are provided within the PostProcessing.py file to load, analyse and plot the siimulation results. The use of these functions is illustrated into the the "Read_results_notebook.ipynb"  Notebook, which can be run by changing the path to the simulation folder.

The type of results provided bt the postprocessing is illustrated with the following figures:

.. image:: figures/results_dispatch.png
.. image:: figures/results_rug.png
.. image:: figures/results_balance.png
.. image:: figures/results_aggreg.png
.. image:: figures/results_zones.png
.. image:: figures/results_congestion.png


.. _Anaconda: https://www.continuum.io/downloads
