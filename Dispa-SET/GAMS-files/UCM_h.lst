GAMS 24.3.3  r48116 Released Sep 19, 2014 WEX-WEI x86 64bit/MS Windows 02/08/16 09:22:35 Page 1
UCM model
C o m p i l a t i o n


   2  *Option LimRow=100000000;
   3  Option IterLim=100000000;
   4  Option ResLim = 10000000000;
   5  *Option SolPrint=On;
   6  Option SolPrint=Silent;
   7   
   8   
   9   
  10  *=========================================================================
      ======
  11  *Definition of the dataset-related options
  12  *=========================================================================
      ======
  13   
  14  * Print results to excel files (0 for no, 1 for yes)
  16   
  17  * Name of the input file (Ideally, stick to the default Input.gdx)
  18  *$set InputFileName Input.gdx
  20   
  21  *=========================================================================
      ======
  22  *Definition of   sets and parameters
  23  *=========================================================================
      ======
  24  SETS
  25  c                Countries
  26  mk               Markets
  27  n                Nodes
  28  l                Lines
  29  u                Units
  30  t                Generation technologies
  31  tr(t)            Renewable generation technologies
  32  f                Fuel types
  33  p                Pollutants
  34  s(u)             Storage Units (with reservoir)
  35  h                Hours
  36  i(h)             Subset of simulated hours for one iteration
  37  z(h)             Subset of all simulated hours
  38  ;
  39   
  40  *$if %LookAhead%==1 SET i   TimeStep    /1*48/ ;
  41  *$if %LookAhead%==0 SET i   TimeStep    /1*24/ ;
  42   
  43   
  44  Alias(c,cc);
  45  Alias(mk,mkmk);
  46  Alias(n,nn);
  47  Alias(l,ll);
  48  Alias(u,uu);
  49  Alias(t,tt);
  50  Alias(f,ff);
  51  Alias(p,pp);
  52  Alias(s,ss);
  53  Alias(h,hh);
  54  Alias(i,ii);
  55   
  56  *Parameters as defined in the input file
  57  PARAMETERS
  58  AvailabilityFactor(u,h)          [%]     Availability factor
  59  CommittedInitial(u)              [n.a.]  Initial committment status
  60  Config
  61  *CostCurtailment(n,h)             [€\MW]  Curtailment costs
  62  CostFixed(u)                     [€\h]   Fixed costs
  63  CostRampUp(u)                    [€\MW\h]Ramp-up costs
  64  CostRampDown(u)                  [€\MW\h]Ramp-down costs
  65  CostShutDown(u)                  [€]     Shut-down costs
  66  CostStartUp(u)                   [€]     Start-up costs
  67  CostVariable(u,h)              [€\MW]  Variable costs
  68  Curtailment(n)                   [n.a]   Curtailment allowed or not {1 0} 
      at node n
  69  Demand(mk,n,h)                   [MW]    Demand
  70  Efficiency(u)                    [%]     Efficiency
  71  EmissionMaximum(n,p)             [tP]    Emission limit
  72  EmissionRate(u,p)                [tP\MW] P emission rate
  73  FlowMaximum(l,h)                 [MW]    Line limits
  74  FlowMinimum(l,h)                 [MW]    Minimum flow
  75  FuelPrice(n,f,h)                 [€\F]   Fuel price
  76  Fuel(u,f)                        [n.a.]  Fuel type {1 0}
  77  LineNode(l,n)                    [n.a.]  Incidence matrix {-1 +1}
  78  LoadShedding(n)                  [n.a.]  Load shedding capacity
  79  Location(u,n)                    [n.a.]  Location {1 0}
  80  Markup(u,h)                      [€\MW]  Markup
  81  OutageFactor(u,h)                [%]     Outage Factor (100% = full outage
      )
  82  PartLoadMin(u)                   [%]     Minimum part load
  83  PermitPrice(p)                   [€\tP]  Permit price
  84  PowerCapacity(u)                 [MW]    Installed capacity
  85  PowerInitial(u)                  [MW]    Power output before initial perio
      d
  86  PowerMinStable(u)                [MW]    Minimum power output
  87  PriceTransmission(l,h)           [€\MWh] Transmission price
  88  StorageChargingCapacity(u)        [MW]   Storage capacity
  89  StorageChargingEfficiency(u)      [%]    Charging efficiency
  90  RampDownMaximum(u)               [MW\h]  Ramp down limit
  91  RampShutDownMaximum(u)           [MW\h]  Shut-down ramp limit
  92  RampStartUpMaximum(u)            [MW\h]  Start-up ramp limit
  93  RampUpMaximum(u)                 [MW\h]  Ramp up limit
  94  Reserve(t)                       [n.a.]  Reserve technology {1 0}
  95  StorageCapacity(u)               [MWh] Storage capacity
  96  StorageDischargeEfficiency(u)    [%]     Discharge efficiency
  97  StorageOutflow(u,h)              [MWh]  Storage outflows
  98  StorageInflow(u,h)               [MWh]  Storage inflows (potential energy)
  99  StorageInitial(u)                [MWh] Storage level before initial period
 100  StorageMinimum(u)                [MWh] Storage minimum
 101  Technology(u,t)                  [n.a.]  Technology type {1 0}
 102  TimeDown(u,h)                    [h]     Hours down
 103  TimeDownLeft_initial(u)          [h]     Required time down left at the be
      ginning of the simulated time period
 104  TimeDownLeft_JustStopped(u,h)    [h]     Required time down left at hour h
       if the Unit has just been stopped
 105  TimeDownInitial(u)               [h]     Hours down before initial period
 106  TimeDownMinimum(u)               [h]     Minimum down time
 107  TimeUpLeft_initial(u)            [h]     Required time up left at the begi
      nning of the simulated time period
 108  TimeUpInitial(u)                 [h]     Hours on before initial period
 109  TimeUpMinimum(u)                 [h]     Minimum up time
 110  FlexibilityUp(u)                [MW\h]  Flexibility (up) of fast-starting 
      power plants
 111  FlexibilityDown(u)              [MW\h]  Flexibility (down) of a committed 
      power plant
 112  ;
 113   
 114  *Parameters as used within the loop
 115  PARAMETERS
 116  TimeUpLeft_JustStarted(u,h)      [h]     Required time up left at hour h i
      f the Unit has just been started
 117  CostLoadShedding(n,h)            [€\MW]  Value of lost load
 118  TimeUp(u,h)                      [h]     Hours up
 119  LoadMaximum(u,h)                 [%]     Maximum load given AF and OF
 120  PowerMustRun(u,h)                [MW]    Minimum power output
 121  ;
 122   
 123  *=========================================================================
      ======
 124  *Data import
 125  *=========================================================================
      ======
 126   
GDXIN   H:\My Documents\Python Scripts\dispa-set\Dispa-SET\GAMS-files\Inputs.gdx
 128   
 129  $LOAD c
****        $492
--- LOAD  mk = 50:mk
--- LOAD  n = 51:n
--- LOAD  l = 49:l
--- LOAD  u = 54:u
--- LOAD  t = 55:t
--- LOAD  tr = 48:tr
--- LOAD  f = 46:f
--- LOAD  p = 52:p
--- LOAD  s = 53:s
--- LOAD  h = 47:h
 140  *$LOAD d
--- LOAD  AvailabilityFactor = 37:AvailabilityFactor
--- LOAD  Config = 12:Config
--- LOAD  CostFixed = 3:CostFixed
--- LOAD  CostShutDown = 21:CostShutDown
--- LOAD  CostStartUp = 8:CostStartUp
--- LOAD  CostVariable = 25:CostVariable
--- LOAD  Curtailment = 18:Curtailment
--- LOAD  Demand = 19:Demand
--- LOAD  StorageDischargeEfficiency = 36:StorageDischargeEfficiency
--- LOAD  Efficiency = 17:Efficiency
--- LOAD  EmissionMaximum = 26:EmissionMaximum
--- LOAD  EmissionRate = 4:EmissionRate
--- LOAD  FlowMaximum = 39:FlowMaximum
--- LOAD  FlowMinimum = 22:FlowMinimum
--- LOAD  FuelPrice = 14:FuelPrice
--- LOAD  Fuel = 10:Fuel
--- LOAD  LineNode = 11:LineNode
--- LOAD  LoadShedding = 40:LoadShedding
--- LOAD  Location = 43:Location
--- LOAD  Markup = 24:Markup
--- LOAD  OutageFactor = 15:OutageFactor
--- LOAD  PermitPrice = 6:PermitPrice
--- LOAD  PowerCapacity = 30:PowerCapacity
--- LOAD  PowerInitial = 7:PowerInitial
--- LOAD  PartLoadMin = 13:PartLoadMin
--- LOAD  PriceTransmission = 27:PriceTransmission
--- LOAD  StorageChargingCapacity = 29:StorageChargingCapacity
--- LOAD  StorageChargingEfficiency = 23:StorageChargingEfficiency
--- LOAD  RampDownMaximum = 33:RampDownMaximum
--- LOAD  RampShutDownMaximum = 16:RampShutDownMaximum
--- LOAD  RampStartUpMaximum = 5:RampStartUpMaximum
--- LOAD  RampUpMaximum = 2:RampUpMaximum
--- LOAD  Reserve = 32:Reserve
--- LOAD  StorageCapacity = 28:StorageCapacity
--- LOAD  StorageInflow = 38:StorageInflow
--- LOAD  StorageInitial = 35:StorageInitial
--- LOAD  StorageMinimum = 31:StorageMinimum
--- LOAD  StorageOutflow = 20:StorageOutflow
--- LOAD  Technology = 41:Technology
--- LOAD  TimeDownInitial = 1:TimeDownInitial
--- LOAD  TimeDownMinimum = 9:TimeDownMinimum
--- LOAD  TimeUpInitial = 42:TimeUpInitial
--- LOAD  TimeUpMinimum = 34:TimeUpMinimum
 184  ;
 185   
 186  Display
 187  c,
****  $141
 188  mk,
 189  n,
 190  l,
 191  u,
 192  t,
 193  tr,
 194  f,
 195  p,
 196  s,
 197  h,
 198  AvailabilityFactor,
 199  Config,
 200  CostFixed,
 201  CostShutDown,
 202  CostStartUp,
 203  CostVariable,
 204  Demand,
 205  StorageDischargeEfficiency,
 206  Efficiency,
 207  EmissionMaximum,
 208  EmissionRate,
 209  FlowMaximum,
 210  FlowMinimum,
 211  FuelPrice,
 212  Fuel,
 213  LineNode,
 214  Location,
 215  LoadShedding
 216  Markup,
 217  OutageFactor,
 218  PartLoadMin,
 219  PermitPrice,
 220  PowerCapacity,
 221  PowerInitial,
 222  PriceTransmission,
 223  StorageChargingCapacity,
 224  StorageChargingEfficiency,
 225  RampDownMaximum,
 226  RampShutDownMaximum,
 227  RampStartUpMaximum,
 228  RampUpMaximum,
 229  Reserve,
 230  StorageCapacity,
 231  StorageInflow,
 232  StorageInitial,
 233  StorageMinimum,
 234  StorageOutflow,
 235  Technology,
 236  TimeDownInitial,
 237  TimeDownMinimum,
 238  TimeUpInitial
 239  TimeUpMinimum
 240  ;
 241   
 242  *=========================================================================
      ======
 243  *Definition of variables
 244  *=========================================================================
      ======
 245  BINARY VARIABLES
 246  Committed(u,h)             [n.a.]  Unit committed at hour h {1 0}
 247  ;
 248   
 249  POSITIVE VARIABLES
 250  CostStartUpH(u,h)          [EUR]   Cost of starting up
 251  CostShutDownH(u,h)         [EUR]   cost of shutting down
 252  CostRampUpH(u,h)           [EUR]   Ramping cost
 253  CostRampDownH(u,h)         [EUR]   Ramping cost
 254  CurtailedPower(n,h)        [MW]    Curtailed power at node n
 255  Flow(l,h)                  [MW]    Flow through lines
 256  MaxRamp2U(u,h)             [MW\h]  Maximum 15-min Ramp-up capbility
 257  MaxRamp2D(u,h)             [MW\h]  Maximum 15-min Ramp-down capbility
 258  Power(u,h)                 [MW]    Power output
 259  PowerMaximum(u,h)          [MW]    Power output
 260  PowerMinimum(u,h)          [MW]    Power output
 261  ShedLoad(n,h)              [MW]    Shed load
 262  StorageInput(s,h)          [MWh]   Charging input for storage units
 263  StorageLevel(s,h)          [MWh]   Storage level of charge
 264  LostLoad_MaxPower(n,h)     [MW]    Deficit in terms of maximum power
 265  LostLoad_RampUp(u,h)       [MW]    Deficit in terms of ramping up for each
       plant
 266  LostLoad_RampDown(u,h)     [MW]    Deficit in terms of ramping down
 267  LostLoad_MinPower(n,h)     [MW]    Power exceeding the demand
 268  LostLoad_Reserve2U(n,h)    [MW]    Deficit in reserve up
 269  LostLoad_Reserve2D(n,h)    [MW]    Deficit in reserve down
 270  SystemCost(h)              [EUR]   Hourly system cost
 271  ;
 272   
 273  free variable
 274  SystemCostD               ![EUR]   Total system cost  for one optimization
       period
 275  ;
 276   
 277  *=========================================================================
      ======
 278  *Assignment of initial values
 279  *=========================================================================
      ======
 280  *CostVariable(u,h,b)=Markup(u,h,b)+sum((n,f),(Fuel(u,f)*FuelPrice(n,h,f)*L
      ocation(u,n))/Efficiency(u))+sum(p,EmissionRate(u,p)*PermitPrice(p));
 281   
 282  *Forecasted upwards reserve margin (UCTE). Only if not provided in the par
      ameters
 283  Demand("2U",n,h)$(Demand("2U",n,h)=0)=sqrt(10*smax(hh,Demand("DA",n,hh))+1
      50**2)-150;
 284  *Forecasted downwards reserve margin (UCTE)
 285  Demand("2D",n,h)$(Demand("2D",n,h)=0)=0.5*Demand("2U",n,h);
 286   
 287  *Initial commitment status
 288  CommittedInitial(u)=0;
 289  CommittedInitial(u)$(PowerInitial(u)>0)=1;
 290   
 291  * Definition of the minimum stable load:
 292  PowerMinStable(u) = PartLoadMin(u)*PowerCapacity(u);
 293   
 294  * Start-up and Shutdown ramping constraints. This remains to be solved
 295  RampStartUpMaximum(u) = max(RampStartUpMaximum(u),PowerMinStable(u));
 296  RampShutDownMaximum(u) = max(RampShutDownMaximum(u),PowerMinStable(u));
 297   
 298  * If the plant is stopped, its 15-min ramp-up capability is RampStartUpMax
      imum if it can start in this timeframe:
 299  FlexibilityUp(u) = RampStartUpMaximum(u)$(RampStartUpMaximum(u)>=PowerMinS
      table(u)*4);
 300   
 301  * If the plant is started, its 15-min ramp-down capability is either RampS
      hutDownMaximum if it is fast enough, or RampDownMaximum otherwise
 302  *  RampDownMaximum(u)$(RampShutDownMaximum(u)<PowerMinStable(u)*4)
 303  FlexibilityDown(u) = RampShutDownMaximum(u)$(RampShutDownMaximum(u)>=Power
      MinStable(u)*4);
 304   
 305  LoadMaximum(u,h)= AvailabilityFactor(u,h)*(1-OutageFactor(u,h));
 306   
 307  PowerMustRun(u,h)=PowerMinStable(u)*LoadMaximum(u,h);
 308  PowerMustRun(u,h)$(sum(tr,Technology(u,tr))>=1 and smin(n,Location(u,n)*(1
      -Curtailment(n)))=1) = PowerCapacity(u)*LoadMaximum(u,h);
 309   
 310  CostLoadShedding(n,h)=1000;
 311   
 312  Display RampStartUpMaximum, RampShutDownMaximum, CommittedInitial, Flexibi
      lityUp, FlexibilityDown;
 313   
 314  CostRampup(u)=0;
 315  CostRampDown(u)=0;
 316   
 318   
 319  *=========================================================================
      ======
 320  *Declaration and definition of equations
 321  *=========================================================================
      ======
 322  EQUATIONS
 323  EQ_Objective_function
 324  EQ_CostStartUp
 325  EQ_CostShutDown
 326  EQ_CostRampUp
 327  EQ_CostRampDown
 328  *EQ_CostRamping2
 329  EQ_Demand_balance_DA
 330  EQ_Demand_balance_2U
 331  EQ_Demand_balance_2D
 332  EQ_Power_must_run
 333  EQ_Power_bound_lower
 334  EQ_Power_bound_upper
 335  EQ_Power_available
 336  EQ_PowerMaximum_previous
 337  EQ_PowerMaximum_following
 338  EQ_Ramp_down
 339  EQ_Max_RampUp1
 340  EQ_Max_RampUp2
 341  EQ_Max_RampDown1
 342  EQ_Max_RampDown2
 343  EQ_Minimum_time_up_A
 344  EQ_Minimum_time_up_B
 345  EQ_Minimum_time_up_C
 346  EQ_Minimum_time_up_JustStarted
 347  EQ_Minimum_time_down_A
 348  EQ_Minimum_time_down_B
 349  EQ_Minimum_time_down_C
 350  EQ_Minimum_time_down_JustStopped
 351  EQ_Storage_minimum
 352  EQ_Storage_level
 353  EQ_Storage_input
 354  EQ_Storage_MaxDischarge
 355  EQ_Storage_MaxCharge
 356  EQ_Storage_balance
 357  EQ_Storage_boundaries
 358  EQ_SystemCost
 359  EQ_Emission_limits
 360  EQ_Flow_limits_lower
 361  EQ_Flow_limits_upper
 362  EQ_Force_Commitment
 363  EQ_Force_DeCommitment
 364  *EQ_Curtailment
 365  EQ_LoadShedding
 366  ;
 367   
 368  *Objective function
 369   
 370  EQ_SystemCost(i)..
 371           SystemCost(i)
 372           =E=
 373           sum((u),CostFixed(u)*Committed(u,i))
 374           +sum((u),CostStartUpH(u,i) + CostShutDownH(u,i))
 375           +sum((u),CostRampUpH(u,i) + CostRampDownH(u,i))
 376           +sum((u),CostVariable(u,i)*Power(u,i))
 377           +sum((l),PriceTransmission(l,i)*Flow(l,i))
 378           +sum((n),CostLoadShedding(n,i)*ShedLoad(n,i))
 379           +30E3*(sum((n),LostLoad_MaxPower(n,i)+LostLoad_MinPower(n,i)))
 380           +20E3*(sum((n),LostLoad_Reserve2U(n,i)+LostLoad_Reserve2D(n,i)))
 381           +10E3*sum((u),LostLoad_RampUp(u,i)+LostLoad_RampDown(u,i))
 382  ;
 383   
 384  EQ_Objective_function..
 385           SystemCostD
 386           =E=
 387           sum(i,SystemCost(i))
 388  ;
 389   
 390  EQ_CostStartUp(u,i)$(CostStartUp(u) <> 0)..
 391           CostStartUpH(u,i)
 392           =g=
 393           CostStartUp(u)*(Committed(u,i)-CommittedInitial(u)$(ord(i) = 1)-C
      ommitted(u,i-1)$(ord(i) > 1))
 394  ;
 395   
 396  EQ_CostShutDown(u,i)$(CostShutDown(u) <> 0)..
 397           CostShutDownH(u,i)
 398           =g=
 399           CostShutDown(u)*(CommittedInitial(u)$(ord(i) = 1)+Committed(u,i-1
      )$(ord(i) > 1)-Committed(u,i))
 400  ;
 401   
 402  EQ_CostRampUp(u,i)$(CostRampUp(u) <> 0)..
 403           CostRampUpH(u,i)
 404           =g=
 405           CostRampUp(u)*(Power(u,i)-PowerInitial(u)$(ord(i) = 1)-Power(u,i-
      1)$(ord(i) > 1))
 406  ;
 407   
 408  EQ_CostRampDown(u,i)$(CostRampDown(u) <> 0)..
 409           CostRampDownH(u,i)
 410           =g=
 411           CostRampDown(u)*(PowerInitial(u)$(ord(i) = 1)+Power(u,i-1)$(ord(i
      ) > 1)-Power(u,i))
 412  ;
 413   
 414  *EQ_CostRamping2(u,i)$(CostRampUp(u)=0 and CostRampDown(u)=0)..
 415  *         CostRamping(u,i)
 416  *         =e=
 417  *         0
 418  *;
 419   
 420  *Hourly demand balance in the day-ahead market for each node
 421  EQ_Demand_balance_DA(n,i)..
 422           sum(u,Power(u,i)*Location(u,n))
 423  *         +sum(s,StorageOutputH(s,i)*Location(s,n))
 424            +sum(l,Flow(l,i)*LineNode(l,n))
 425           =E=
 426           Demand("DA",n,i)
 427           +sum(s,StorageInput(s,i)*Location(s,n))
 428           -ShedLoad(n,i)
 429           -LostLoad_MaxPower(n,i)
 430           +LostLoad_MinPower(n,i)
 431  ;
 432   
 433  * Maximum 15-min ramping up, in MW/h:
 434  Eq_Max_RampUp1(u,i)$(sum(tr,Technology(u,tr))=0)..
 435           MaxRamp2U(u,i)
 436           =L=
 437           RampUpMaximum(u)*Committed(u,i)
 438           + FlexibilityUp(u)*(1-Committed(u,i))
 439  *         +RampStartUpMaximum(u)$(RampStartUpMaximum(u)>=PowerMinStable(u)
      *4)*(1-Committed(u,i))
 440  ;
 441   
 442  * Maximum 15-min ramping up, in MW/h:
 443  Eq_Max_RampUp2(u,i)$(sum(tr,Technology(u,tr))=0)..
 444           MaxRamp2U(u,i)
 445           =L=
 446           (PowerCapacity(u)*LoadMaximum(u,i) - Power(u,i))*4
 447  ;
 448   
 449  * Maximum 15-min shutting down, in MW/h:
 450  Eq_Max_RampDown1(u,i)$(sum(tr,Technology(u,tr))=0)..
 451           MaxRamp2D(u,i)
 452           =L=
 453           max(RampDownMaximum(u),FlexibilityDown(u))*Committed(u,i)
 454  ;
 455   
 456  * Maximum 15-min ramping down, in MW/h:
 457  Eq_Max_RampDown2(u,i)$(sum(tr,Technology(u,tr))=0)..
 458           MaxRamp2D(u,i)
 459           =L=
 460           (Power(u,i) - PowerMinStable(u)$(RampShutDownMaximum(u)<PowerMinS
      table(u)*4)*Committed(u,i))*4
 461  ;
 462   
 463  EQ_Demand_balance_2U(n,i)..
 464           sum((u,t),MaxRamp2U(u,i)*Technology(u,t)*Reserve(t)*Location(u,n)
      )
 465  *         +CurtailedPowerH(n,i)*Curtailment(n,i)
 466           =G=
 467           +Demand("2U",n,i)
 468           -LostLoad_reserve2U(n,i)
 469  ;
 470   
 471  *Hourly demand balance in the downwards reserve market for each node
 472  EQ_Demand_balance_2D(n,i)..
 473           sum((u,t),MaxRamp2D(u,i)*Technology(u,t)*Reserve(t)*Location(u,n)
      )
 474           =G=
 475           Demand("2D",n,i)
 476           -sum(s,(StorageChargingCapacity(s)-StorageInput(s,i)) )*4
 477           -LostLoad_reserve2D(n,i)
 478  ;
 479   
 480   
 481  *Hourly demand balance in the upwards reserve market for each node
 482  *EQ_Demand_balance_2U(n,i)..
 483  *         sum((u,t),PowerMaximumH(u,i)*Technology(u,t)*Reserve(t)*Location
      (u,n))
 484  *         +CurtailedPowerH(n,i)*Curtailment(n,i)
 485  *         =G=
 486  *         DemandH(n,i,"DA")
 487  *         +DemandH(n,i,"2U")
 488  *         -LostLoad_reserve2U(n,i)
 489  *;
 490   
 491  *Hourly demand balance in the downwards reserve market for each node
 492  *EQ_Demand_balance_2D(n,i)..
 493  *         sum((u,t),PowerMinimumH(u,i)*Technology(u,t)*Reserve(t)*Location
      (u,n))
 494  *         =L=
 495  *         DemandH(n,i,"DA")
 496  *         -DemandH(n,i,"2D")
 497  *         +LostLoad_reserve2DH(n,i)
 498  *;
 499   
 500  *Minimum power output is above the must-run output level for each unit in 
      all periods
 501  EQ_Power_must_run(u,i)..
 502           PowerMustRun(u,i)
 503           *Committed(u,i)
 504  *         +(PowerCapacity(u)
 505  *                 *LoadMaximum(u,i)
 506  *                 -PowerMustRunH(u,i))
 507  *                         *Committed(u,i)
 508  *                         *(1-Curtailment(u,i))
 509           =L=
 510           Power(u,i)
 511  ;
 512   
 513  *Maximum power output is below the available capacity
 514  EQ_Power_available(u,i)..
 515           Power(u,i)
 516           =L=
 517           PowerCapacity(u)
 518                   *LoadMaximum(u,i)
 519                           *Committed(u,i)
 520  ;
 521   
 522  *Maximum power output with respect to power output in the previous period.
 523  EQ_PowerMaximum_previous(u,i)$(sum(tr,Technology(u,tr))=0)..
 524           Power(u,i)
 525           =L=
 526           (PowerInitial(u)
 527           +RampUpMaximum(u)
 528                   *CommittedInitial(u)
 529           +RampStartUpMaximum(u)
 530                   *(1-CommittedInitial(u)))$(ord(i) = 1)
 531           +(Power(u,i-1)
 532           +RampUpMaximum(u)
 533                   *Committed(u,i-1)
 534           +RampStartUpMaximum(u)
 535                   *(1-Committed(u,i-1)))$(ord(i) > 1)
 536           +LostLoad_RampUp(u,i)
 537  ;
 538   
 539  *Maximum power output with respect to power output in the following period
 540  EQ_PowerMaximum_following(u,i)$(sum(tr,Technology(u,tr))=0)..
 541           Power(u,i)$(ord(i) < card(i))
 542           =L=
 543           (PowerCapacity(u)
 544                   *LoadMaximum(u,i+1)
 545                           *Committed(u,i+1)
 546           +RampShutDownMaximum(u)
 547                   *(1-Committed(u,i+1)))$(ord(i) < card(i))
 548           +LostLoad_RampDown(u,i)
 549  ;
 550   
 551  *If the unit keeps committed the reduction in power output is lower than t
      he
 552  *ramp-down limit. If the unit is de-committed the reduction is lower than 
      the
 553  *shut-down ramp limit
 554  EQ_Ramp_down(u,i)$(sum(tr,Technology(u,tr))=0)..
 555           (PowerInitial(u)-Power(u,i))$(ord(i) = 1)
 556           +(Power(u,i-1)-Power(u,i))$(ord(i) > 1)
 557           =L=
 558           PowerCapacity(u)
 559                           *(1-Committed(u,i))
 560           +(RampDownMaximum(u)
 561                   *CommittedInitial(u))$(ord(i) = 1)
 562           +(RampDownMaximum(u)
 563                   *Committed(u,i-1))$(ord(i) > 1)
 564           +LostLoad_RampDown(u,i)
 565  ;
 566  *Minimum time up constraints
 567  *EQ_Minimum_time_up(u)..
 568  *         Committed(u,i)
 569  *         =G=
 570  *         sum(ii$((ord(ii) >= ord(i)+1-TimeUpMinimum(u)) and (ord(ii))<=or
      d(i))),Committed(u,i)-CommittedH(h-1,u))
 571  *;
 572   
 573  EQ_Minimum_time_up_A(u)..
 574           sum(i$(ord(i) <= TimeUpLeft_initial(u)),1-Committed(u,i))
 575           =E=
 576           0
 577  ;
 578   
 579  EQ_Minimum_time_up_B(u,i)$((TimeUpLeft_initial(u)+1 <= ord(i)) and (ord(i)
       <= card(i)-TimeUpMinimum(u)+1))..
 580           sum(ii$((ord(i) <= ord(ii)) and (ord(ii) <= (ord(i)+TimeUpMinimum
      (u)-1))),Committed(u,ii))
 581           =G=
 582           TimeUpMinimum(u)
 583                   *(Committed(u,i)-CommittedInitial(u)$(ord(i) = 1)-Committ
      ed(u,i-1)$(ord(i) > 1))
 584  ;
 585   
 586  EQ_Minimum_time_up_C(u,i)$((card(i)-TimeUpMinimum(u)+2 <= ord(i)) and (ord
      (i)<=card(i)))..
 587           sum(ii$((ord(i) <= ord(ii)) and (ord(ii) <= card(i))),Committed(u
      ,ii)-(Committed(u,i)-CommittedInitial(u)$(ord(i) = 1)-Committed(u,i-1)$(or
      d(i) > 1)))
 588           =G=
 589           0
 590  ;
 591   
 592  *IH: why do we need this equation?, to replace the two previous?
 593  EQ_Minimum_time_up_JustStarted(u,i)$(ord(i) > 1)..
 594           sum(ii$((ord(i) <= ord(ii)) and (ord(ii) <= (ord(i)+TimeUpLeft_Ju
      stStarted(u,i)-1))),Committed(u,ii))
 595           =G=
 596           TimeUpLeft_JustStarted(u,i)
 597                   *(Committed(u,i)-CommittedInitial(u)$(ord(i) = 1)-Committ
      ed(u,i-1)$(ord(i) > 1))
 598  ;
 599   
 600  *Minimum time down constraints
 601  *EQ_Minimum_time_down(u)..
 602  *         1-Committed(u,i)
 603  *         =G=
 604  *         sum(ii$((ord(ii) >= ord(h)+1-TimeDownMinimum(u)) and (ord(ii))<=
      ord(h))),CommittedH(h-1,u)-Committed(u,i))
 605  *;
 606   
 607  EQ_Minimum_time_down_A(u)..
 608           sum(i$(ord(i) <= TimeDownLeft_initial(u)),Committed(u,i))
 609           =E=
 610           0
 611  ;
 612   
 613  EQ_Minimum_time_down_B(u,i)$((TimeDownLeft_initial(u)+1 <= ord(i)) and (or
      d(i) <= card(i)-TimeDownMinimum(u)+1))..
 614           sum(ii$((ord(i) <= ord(ii)) and (ord(ii) <= (ord(i)+TimeDownMinim
      um(u)-1))),1-Committed(u,ii))
 615           =G=
 616           TimeDownMinimum(u)
 617                   *(CommittedInitial(u)$(ord(i) = 1)+Committed(u,i-1)$(ord(
      i) > 1)-Committed(u,i))
 618  ;
 619   
 620  EQ_Minimum_time_down_C(u,i)$((card(i)-TimeDownMinimum(u)+2 <= ord(i)) and 
      (ord(i)<=card(i)))..
 621           sum(ii$((ord(i) <= ord(ii)) and (ord(ii) <= card(i))),1-Committed
      (u,ii)-(CommittedInitial(u)$(ord(i) = 1)+Committed(u,i-1)$(ord(i) > 1)-Com
      mitted(u,i)))
 622           =G=
 623           0
 624  ;
 625   
 626  *IH: why do we need this equation?, to replace the two previous?
 627  EQ_Minimum_time_down_JustStopped(u,i)$(TimeDownLeft_initial(u)+1 <= ord(i)
      )..
 628           sum(ii$((ord(i) <= ord(ii)) and (ord(ii) <= (ord(i)+TimeDownLeft_
      JustStopped(u,i)-1))),1-Committed(u,ii))
 629           =G=
 630           TimeDownLeft_JustStopped(u,i)
 631                   *(CommittedInitial(u)$(ord(i) = 1)+Committed(u,i-1)$(ord(
      i) > 1)-Committed(u,i))
 632  ;
 633   
 634  *Storage level must be above a minimum
 635  EQ_Storage_minimum(s,i)..
 636           StorageMinimum(s)
 637           =L=
 638           StorageLevel(s,i)
 639  ;
 640   
 641  *Storage level must below storage capacity
 642  EQ_Storage_level(s,i)..
 643           StorageLevel(s,i)
 644           =L=
 645           StorageCapacity(s)
 646  ;
 647   
 648  * Storage charging is bounded by the maximum capacity
 649  EQ_Storage_input(s,i)..
 650           StorageInput(s,i)
 651           =L=
 652           StorageChargingCapacity(s)*(1-Committed(s,i))
 653  ;
 654   
 655  *Discharge is limited by the storage level
 656  EQ_Storage_MaxDischarge(s,i)..
 657           Power(s,i)/(max(StorageDischargeEfficiency(s),0.0001))
 658           +StorageOutflow(s,i) - StorageInflow(s,i)
 659           =L=
 660           StorageLevel(s,i)
 661  ;
 662   
 663  *Charging is limited by the remaining storage capacity
 664  EQ_Storage_MaxCharge(s,i)..
 665           StorageInput(s,i) * StorageChargingEfficiency(s)
 666           -StorageOutflow(s,i) + StorageInflow(s,i)
 667           =L=
 668           StorageCapacity(s) - StorageLevel(s,i)
 669  ;
 670   
 671  *Storage balance
 672  EQ_Storage_balance(s,i)..
 673           StorageInitial(s)$(ord(i) = 1)
 674           +StorageLevel(s,i-1)$(ord(i) > 1)
 675  *         +StorageLevelH(h--1,s)
 676           +StorageInflow(s,i)
 677           +StorageInput(s,i)*StorageChargingEfficiency(s)
 678           =E=
 679           StorageLevel(s,i)
 680           +StorageOutflow(s,i)
 681           +Power(s,i)/(max(StorageDischargeEfficiency(s),0.0001))
 682  ;
 683   
 684  * Assuming cyclic boundary counditions:
 685  EQ_Storage_boundaries(s,i)$(ord(i) = card(i))..
 686           StorageInitial(s)
 687           =E=
 688           StorageLevel(s,i)
 689  ;
 690   
 691  *Total emissions are capped
 692  EQ_Emission_limits(n,i,p)..
 693           sum(u,Power(u,i)*EmissionRate(u,p)*Location(u,n))
 694           =L=
 695           EmissionMaximum(n,p)
 696  ;
 697   
 698  *Flows are above minimum values
 699  EQ_Flow_limits_lower(l,i)..
 700           FlowMinimum(l,i)
 701           =L=
 702           Flow(l,i)
 703  ;
 704   
 705  *Flows are below maximum values
 706  EQ_Flow_limits_upper(l,i)..
 707           Flow(l,i)
 708           =L=
 709           FlowMaximum(l,i)
 710  ;
 711   
 712  *Force Unit commitment/decommitment:
 713  * E.g: renewable units with AF>0 must be committed
 714  EQ_Force_Commitment(u,i)$((sum(tr,Technology(u,tr))>=1 and LoadMaximum(u,i
      )>0) or (ord(i)=4 and ord(u)=129))..
 715           Committed(u,i)
 716           =E=
 717           1;
 718   
 719  * E.g: renewable units with AF=0 must be decommitted
 720  EQ_Force_DeCommitment(u,i)$(LoadMaximum(u,i)=0 or ord(u)=200)..
 721           Committed(u,i)
 722           =E=
 723           0;
 724   
 725  *Curtailment allowed or not
 726  *EQ_Curtailment(n,i)..
 727  *         CurtailedPowerH(n,i)
 728  *         =L=
 729  *         sum(u,Power(u,i)*sum(tr,Technology(u,tr))*Location(u,n))
 730  *            *Curtailment(n)
 731  *;
 732   
 733  *Load shedding
 734  EQ_LoadShedding(n,i)..
 735           ShedLoad(n,i)
 736           =L=
 737           LoadShedding(n)
 738  ;
 739   
 740   
 741  *=========================================================================
      ======
 742  *Definition of models
 743  *=========================================================================
      ======
 744  MODEL UCM_SIMPLE /
 745  EQ_Objective_function,
 746  EQ_CostStartUp,
 747  EQ_CostShutDown,
 748  *EQ_CostRampUp,
 749  *EQ_CostRampDown,
 750  EQ_Demand_balance_DA,
 751  EQ_Demand_balance_2U,
 752  EQ_Demand_balance_2D,
 753  EQ_Power_must_run,
 754  EQ_Power_available,
 755  EQ_PowerMaximum_previous,
 756  EQ_PowerMaximum_following,
 757  EQ_Ramp_down,
 758  *EQ_Minimum_time_up,
 759  EQ_Minimum_time_up_A,
 760  *EQ_Minimum_time_up_B,
 761  *EQ_Minimum_time_up_C,
 762  EQ_Minimum_time_up_JustStarted,
 763  *EQ_Minimum_time_down,
 764  EQ_Minimum_time_down_A,
 765  *EQ_Minimum_time_down_B,
 766  *EQ_Minimum_time_down_C,
 767  EQ_Minimum_time_down_JustStopped,
 768  EQ_Max_RampUp1,
 769  EQ_Max_RampUp2,
 770  EQ_Max_RampDown1,
 771  EQ_Max_RampDown2,
 772  EQ_Storage_minimum,
 773  EQ_Storage_level,
 774  EQ_Storage_input,
 775  EQ_Storage_balance,
 776  EQ_Storage_boundaries,
 777  EQ_Storage_MaxCharge
 778  EQ_Storage_MaxDischarge
 779  EQ_SystemCost
 780  *EQ_Emission_limits,
 781  EQ_Flow_limits_lower,
 782  EQ_Flow_limits_upper,
 783  EQ_Force_Commitment,
 784  EQ_Force_DeCommitment,
 785  *EQ_Curtailment,
 786  EQ_LoadShedding
 787  /
 788  ;
 789  UCM_SIMPLE.optcr = 0.04;
 790  *UCM_SIMPLE.epgap = 0.005
 791  *UCM_SIMPLE.probe = 3
 792  *UCM_SIMPLE.optfile=1;
 793   
 794  *=========================================================================
      ======
 795  *Solving loop
 796  *=========================================================================
      ======
 797   
 798  * Define the general index of the first and last days and of the start and
       stop days:
 799  scalar index_first,index_last,index_start,index_stop;
 800  index_first=jdate(Config("FirstDay","year"),Config("FirstDay","month"),Con
      fig("FirstDay","day")) ;
 801  index_last=jdate(Config("LastDay","year"),Config("LastDay","month"),Config
      ("LastDay","day")) ;
 802  index_start=jdate(Config("DayStart","year"),Config("DayStart","month"),Con
      fig("DayStart","day"))  ;
 803  index_stop=jdate(Config("DayStop","year"),Config("DayStop","month"),Config
      ("DayStop","day"));
 804   
 805  * Check that the length of index h corresponds to the provided first and l
      ast days:
 806  if (card(h) <> (index_last-index_first+1)*24, abort "The number of time in
      dexes does not correspond to the provided first and last days";);
 807  * Check that the dates make sense
 808  if (index_start < index_first or index_start > index_last or index_stop < 
      index_start or index_stop > index_last, abort "The start and stop dates mu
      st be comprised between the first and last dates";);
 809  * Check the rolling horizon length
 810  if (Config("RollingHorizon Length","day") + Config("RollingHorizon LookAhe
      ad","day") > index_stop - index_start + 1, abort "The rolling horizon is l
      onger than the simulation length";);
 811   
 812   
 813   
 814   
 815  display index_first,index_last,index_start,index_stop;
 816   
 817  * Scalar variables necessary to the loop:
 818  scalar FirstHour,LastHour,LastKeptHour,day;
 819   
 820  * Fixing the initial guesses:
 821  *PowerH.L(u,i)=PowerInitial(u);
 822  *Committed.L(u,i)=CommittedInitial(u);
 823   
 824  FOR(day=index_start-index_first+1 TO index_stop-index_first-(Config("Rolli
      ngHorizon Length","day")+Config("RollingHorizon LookAhead","day"))+2 by Co
      nfig("RollingHorizon Length","day"),
 825           FirstHour = (day-1)*24+1;
 826           LastHour = FirstHour + (Config("RollingHorizon Length","day")+Con
      fig("RollingHorizon LookAhead","day")) * 24 - 1;
 827           LastKeptHour = FirstHour + Config("RollingHorizon Length","day") 
      * 24 - 1;
 828           i(h) = no;
 829           i(h)$(ord(h)>=firsthour and ord(h)<=lasthour)=yes;
 830           display FirstHour,LastHour,LastKeptHour;
 831   
 832  *        Update the subset of all simulated hours:
 833           z(h)$(ord(h)>=firsthour and ord(h)<=lastkepthour)=yes;
 834   
 835           TimeUpLeft_initial(u)=min(card(i),(TimeUpMinimum(u)-TimeUpInitial
      (u))*CommittedInitial(u));
 836           TimeUpLeft_JustStarted(u,i) = min(card(i)-ord(i)+1,TimeUpMinimum(
      u));
 837           TimeDownLeft_initial(u)=min(card(i),(TimeDownMinimum(u)-TimeDownI
      nitial(u))*(1-CommittedInitial(u)));
 838           TimeDownLeft_JustStopped(u,i) = min(card(i)-ord(i)+1,TimeDownMini
      mum(u));
 839   
 840           Display TimeUpLeft_initial,TimeUpLeft_JustStarted,TimeDownLeft_in
      itial,TimeDownLeft_JustStopped,TimeUpInitial,TimeDownInitial,PowerInitial,
      CommittedInitial;
 841   
 842           SOLVE UCM_SIMPLE USING MIP MINIMIZING SystemCostD;
****                                                            $257
 843   
 844           Display EQ_Objective_function.M,EQ_CostStartUp.M,EQ_CostShutDown.
****                                         $141             $141              
      M,EQ_Demand_balance_DA.M,EQ_Power_must_run.M,EQ_Power_available.M,EQ_Power
      $141                   $141                $141                 $141      
      Maximum_previous.M,EQ_PowerMaximum_following.M,EQ_Ramp_down.M,EQ_Minimum_t
                       $141                        $141           $141          
      ime_up_A.M,EQ_Minimum_time_up_JustStarted.M,EQ_Minimum_time_down_A.M,EQ_Mi
               $300
      nimum_time_down_JustStopped.M,   EQ_Max_RampUp1.M,    EQ_Max_RampUp2.M,EQ_
      Max_RampDown1.M,  EQ_Max_RampDown2.M, EQ_Storage_minimum.M, EQ_Storage_lev
      el.M, EQ_Storage_input.M, EQ_Storage_balance.M,EQ_Storage_boundaries.M,EQ_
      Storage_MaxCharge.m,EQ_Storage_MaxDischarge.m,EQ_Flow_limits_lower.M;
 845   
 846  *Time counters
 847           Loop(i,
 848                TimeUp(u,i)$(ord(i) = 1 and Committed.L(u,i) = 1)=TimeUpInit
****                                                      $141
      ial(u)+1;
 849                TimeUp(u,i)$(ord(i) = 1 and Committed.L(u,i) = 0)=0;
 850                TimeUp(u,i)$(ord(i) > 1 and Committed.L(u,i) = 1) = TimeUp(u
      ,i-1)+1;
 851                TimeUp(u,i)$(ord(i) > 1 and Committed.L(u,i) = 0) = 0;
 852   
 853                TimeDown(u,i)$(ord(i) = 1 and Committed.L(u,i) = 0) = TimeDo
      wnInitial(u)+1;
 854                TimeDown(u,i)$(ord(i) = 1 and Committed.L(u,i) = 1) = 0;
 855                TimeDown(u,i)$(ord(i) > 1 and Committed.L(u,i) = 0) = TimeDo
      wn(u,i-1)+1;
 856                TimeDown(u,i)$(ord(i) > 1 and Committed.L(u,i) = 1) = 0;
 857                );
 858   
 859           TimeUpInitial(u)=sum(i$(ord(i)=LastKeptHour-FirstHour+1),TimeUp(u
      ,i));
 860           TimeDownInitial(u)=sum(i$(ord(i)=LastKeptHour-FirstHour+1),TimeDo
      wn(u,i));
 861           CommittedInitial(u)=sum(i$(ord(i)=LastKeptHour-FirstHour+1),Commi
      tted.L(u,i));
 862           PowerInitial(u) = sum(i$(ord(i)=LastKeptHour-FirstHour+1),Power.L
****                                                                           $
      (u,i));
      141
 863   
 864  *Loop variables to display after solving:
 865           Display LastKeptHour,PowerInitial,TimeUp,TimeDown,MaxRamp2D.L,Max
****                                                                       $141 
      Ramp2U.L,CostStartUpH.L,CostShutDownH.L;
             $141           $141            $141
 866   
 867  );
 868   
 869  CurtailedPower.L(n,z)=sum(u,(PowerCapacity(u)*LoadMaximum(u,z)-Power.L(u,z
      ))$(sum(tr,Technology(u,tr))>=1) * Location(u,n));
 870   
 871  Display Flow.L,Power.L,Committed.L,ShedLoad.L,CurtailedPower.L,StorageLeve
****               $141                           $141                          
      l.L,StorageInput.L,SystemCost.L,MaxRamp2U.L,MaxRamp2D.L,LostLoad_MaxPower.
        $141           $141         $141                                        
      L,LostLoad_MinPower.L,LostLoad_reserve2U.L,LostLoad_reserve2D.L,LostLoad_R
      $141                $141                 $141                 $141        
      ampUP.L,LostLoad_RampDown.L;
            $300
 872   
 873   
 874  *=========================================================================
      ======
 875  *Result export
 876  *=========================================================================
      ======
 877   
 878  * Parameters that contain the date information for the output:
 879  parameter YearOutput(h),MonthOutput(h),DayOutput(h);
 880  YearOutput(z) = gyear(index_start+floor((ord(z)-1)/24));
 881  MonthOutput(z) = gmonth(index_start+floor((ord(z)-1)/24));
 882  DayOutput(z) = gday(index_start+floor((ord(z)-1)/24));
 883   
 884  PARAMETER
 885  OutputCommitted(u,h)
 886  *OutputDown(u,h)
 887  *OutputUp(u,h)
 888  OutputFlow(l,h)
 889  OutputPower(u,h)
 890  OutputStorageInput(s,h)
 891  OutputStorageLevel(s,h)
 892  *OutputTimeDown(u,i)
 893  *OutputTimeUp(u,i)
 894  OutputSystemCost(h)
 895  ;
 896   
 897  OutputCommitted(u,z)=Committed.L(u,z);
 898  OutputFlow(l,z)=Flow.L(l,z);
 899  OutputPower(u,z)=Power.L(u,z);
 900  OutputStorageInput(s,z)=StorageInput.L(s,z);
 901  OutputStorageLevel(s,z)=StorageLevel.L(s,z);
 902  *OutputTimeDown(u,i)=TimeDown(u,i);
 903  *OutputTimeUp(u,h)=TimeUp(u,i);
 904  OutputSystemCost(z)=SystemCost.L(z);
 905   
 906  *OutputFlow(l,h)$(OutputFlow(l,h) = 0)=eps;
 907  *OutputPower(u,z)$(OutputPower(u,z) = 0)=eps;
 908  *OutputStorageInput(s,h)$(OutputStorageInput(s,h) = 0)=eps;
 909  *OutputStorageLevel(s,h)$(OutputStorageLevel(s,h) = 0)=eps;
 910   
 911  EXECUTE_UNLOAD "Results.gdx"
 912  YearOutput ,
 913  MonthOutput,
 914  DayOutput,
 915  OutputCommitted,
 916  OutputFlow,
 917  OutputPower,
 918  OutputStorageInput,
 919  OutputStorageLevel,
 920  *OutputTimeDown,
 921  *OutputTimeUp,
 922  OutputSystemCost,
 923  LostLoad_MaxPower,
 924  LostLoad_MinPower,
 925  LostLoad_Reserve2D,
 926  LostLoad_Reserve2U,
 927  LostLoad_RampUp,
 928  LostLoad_RampDown,
 929  ShedLoad,
 930  CurtailedPower
 931  ;
 932   
 934  * Exit here if the PrintResult option is set to 0:
 936   
 937  EXECUTE 'GDXXRW.EXE "Inputs.gdx" O="Results.xlsx" Squeeze=N par=Technology
       rng=Technology!A1 rdim=2 cdim=0'
 938  EXECUTE 'GDXXRW.EXE "Inputs.gdx" O="Results.xlsx" Squeeze=N par=PowerCapac
      ity rng=PowerCapacity!A1 rdim=1 cdim=0'
 939  EXECUTE 'GDXXRW.EXE "Inputs.gdx" O="Results.xlsx" Squeeze=N par=PowerIniti
      al rng=PowerInitialA1 rdim=1 cdim=0'
 940  EXECUTE 'GDXXRW.EXE "Inputs.gdx" O="Results.xlsx" Squeeze=N par=RampDownMa
      ximum rng=RampDownMaximum!A1 rdim=1 cdim=0'
 941  EXECUTE 'GDXXRW.EXE "Inputs.gdx" O="Results.xlsx" Squeeze=N par=RampShutDo
      wnMaximum rng=RampShutDownMaximum!A1 rdim=1 cdim=0'
 942  EXECUTE 'GDXXRW.EXE "Inputs.gdx" O="Results.xlsx" Squeeze=N par=RampStartU
      pMaximum rng=RampStartUpMaximum!A1 rdim=1 cdim=0'
 943  EXECUTE 'GDXXRW.EXE "Inputs.gdx" O="Results.xlsx" Squeeze=N par=RampUpMaxi
      mum rng=RampUpMaximum!A1 rdim=1 cdim=0'
 944  EXECUTE 'GDXXRW.EXE "Inputs.gdx" O="Results.xlsx" Squeeze=N par=TimeUpInit
      ial rng=TimeUpInitial!A1 rdim=1 cdim=0'
 945  EXECUTE 'GDXXRW.EXE "Inputs.gdx" O="Results.xlsx" Squeeze=N par=TimeDownIn
      itial rng=TimeDownInitial!A1 rdim=1 cdim=0'
 946  EXECUTE 'GDXXRW.EXE "Inputs.gdx" O="Results.xlsx" Squeeze=N par=TimeUpMini
      mum rng=TimeUpMinimum!A1 rdim=1 cdim=0'
 947  EXECUTE 'GDXXRW.EXE "Inputs.gdx" O="Results.xlsx" Squeeze=N par=TimeDownMi
      nimum rng=TimeDownMinimum!A1 rdim=1 cdim=0'
 948  EXECUTE 'GDXXRW.EXE "Inputs.gdx" O="Results.xlsx" Squeeze=N par=Reserve rn
      g=Reserve!A1 rdim=1 cdim=0'
 949  EXECUTE 'GDXXRW.EXE "Inputs.gdx" O="Results.xlsx" Squeeze=N par=StorageCap
      acity rng=StorageCapacity!A1 rdim=1 cdim=0'
 950  EXECUTE 'GDXXRW.EXE "Inputs.gdx" O="Results.xlsx" Squeeze=Y par=StorageInf
      low rng=StorageInflow!A1 rdim=1 cdim=1'
 951  EXECUTE 'GDXXRW.EXE "Inputs.gdx" O="Results.xlsx" Squeeze=N par=StorageCap
      acity rng=StorageCapacity!A1 rdim=1 cdim=0'
 952  EXECUTE 'GDXXRW.EXE "Inputs.gdx" O="Results.xlsx" Squeeze=N par=LoadSheddi
      ng rng=LoadShedding!A1 rdim=1 cdim=0'
 953  EXECUTE 'GDXXRW.EXE "Inputs.gdx" O="Results.xlsx" Squeeze=N par=FlowMaximu
      m rng=FlowMaximum!A1 rdim=1 cdim=1'
 954  EXECUTE 'GDXXRW.EXE "Inputs.gdx" O="Results.xlsx" Squeeze=N par=Availabili
      tyFactor rng=AvailabilityFactor!A1 rdim=1 cdim=1'
 955  EXECUTE 'GDXXRW.EXE "Inputs.gdx" O="Results.xlsx" Squeeze=Y par=OutageFact
      or rng=OutageFactor!A1 rdim=1 cdim=1'
 956  EXECUTE 'GDXXRW.EXE "Inputs.gdx" O="Results.xlsx" Squeeze=N par=Demand rng
      =Demand!A1 rdim=2 cdim=1'
 957  EXECUTE 'GDXXRW.EXE "Inputs.gdx" O="Results.xlsx" Squeeze=N par=PartLoadMi
      n rng=PartLoadMin!A1 rdim=1 cdim=0'
 958   
 959  EXECUTE 'GDXXRW.EXE "Results.gdx" O="Results.xlsx" Squeeze=N par=DayOutput
       rng=Power!B3 cdim=1'
 960  EXECUTE 'GDXXRW.EXE "Results.gdx" O="Results.xlsx" Squeeze=N par=MonthOutp
      ut rng=Power!B2 cdim=1'
 961  EXECUTE 'GDXXRW.EXE "Results.gdx" O="Results.xlsx" Squeeze=N par=YearOutpu
      t rng=Power!B1 cdim=1'
 962   
 963  EXECUTE 'GDXXRW.EXE "Results.gdx" O="Results.xlsx" Squeeze=N var=Curtailed
      Power rng=CurtailedPower!A1 rdim=1 cdim=1'
 964  EXECUTE 'GDXXRW.EXE "Results.gdx" O="Results.xlsx" Squeeze=N var=ShedLoad 
      rng=ShedLoad!A1 rdim=1 cdim=1'
 965  EXECUTE 'GDXXRW.EXE "Results.gdx" O="Results.xlsx" Squeeze=N par=OutputCom
      mitted rng=Committed!A1 rdim=1 cdim=1'
 966  EXECUTE 'GDXXRW.EXE "Results.gdx" O="Results.xlsx" Squeeze=N par=OutputFlo
      w rng=Flow!A1 rdim=1 cdim=1'
 967  EXECUTE 'GDXXRW.EXE "Results.gdx" O="Results.xlsx" Squeeze=N par=OutputPow
      er rng=Power!A5 epsout=0 rdim=1 cdim=1'
 968  EXECUTE 'GDXXRW.EXE "Results.gdx" O="Results.xlsx" Squeeze=N par=OutputSto
      rageInput rng=StorageInput!A1 rdim=1 cdim=1'
 969  EXECUTE 'GDXXRW.EXE "Results.gdx" O="Results.xlsx" Squeeze=N par=OutputSto
      rageLevel rng=StorageLevel!A1 rdim=1 cdim=1'
 970  EXECUTE 'GDXXRW.EXE "Results.gdx" O="Results.xlsx" Squeeze=N par=OutputSys
      temCost rng=SystemCost!A1 rdim=1 cdim=0'
 971  EXECUTE 'GDXXRW.EXE "Results.gdx" O="Results.xlsx" Squeeze=Y var=LostLoad_
      MaxPower rng=LostLoad_MaxPower!A1 rdim=1 cdim=1'
 972  EXECUTE 'GDXXRW.EXE "Results.gdx" O="Results.xlsx" Squeeze=Y var=LostLoad_
      MinPower rng=LostLoad_MinPower!A1 rdim=1 cdim=1'
 973  EXECUTE 'GDXXRW.EXE "Results.gdx" O="Results.xlsx" Squeeze=Y var=LostLoad_
      Reserve2D rng=LostLoad_Reserve2D!A1 rdim=1 cdim=1'
 974  EXECUTE 'GDXXRW.EXE "Results.gdx" O="Results.xlsx" Squeeze=Y var=LostLoad_
      Reserve2U rng=LostLoad_Reserve2U!A1 rdim=1 cdim=1'
 975  EXECUTE 'GDXXRW.EXE "Results.gdx" O="Results.xlsx" Squeeze=Y var=LostLoad_
      RampUp rng=LostLoad_RampUp!A1 rdim=1 cdim=1'
 976  EXECUTE 'GDXXRW.EXE "Results.gdx" O="Results.xlsx" Squeeze=Y var=LostLoad_
      RampDown rng=LostLoad_RampDown!A1 rdim=1 cdim=1'
 977   
 978   
GAMS 24.3.3  r48116 Released Sep 19, 2014 WEX-WEI x86 64bit/MS Windows 02/08/16 09:22:35 Page 2
UCM model
Error Messages


141  Symbol declared but no values have been assigned. Check for missing
        data definition, assignment, data loading or implicit assignment
        via a solve statement.
        A wild shot: You may have spurious commas in the explanatory
        text of a declaration. Check symbol reference list.
257  Solve statement not checked because of previous errors
300  Remaining errors not printed for this line
492  Symbol not in GDX

**** 47 ERROR(S)   0 WARNING(S)
GAMS 24.3.3  r48116 Released Sep 19, 2014 WEX-WEI x86 64bit/MS Windows 02/08/16 09:22:35 Page 3
UCM model
Include File Summary


   SEQ   GLOBAL TYPE      PARENT   LOCAL  FILENAME

     1        1 INPUT          0       0  H:\My Documents\Python Scripts\dispa-s
                                          et\Dispa-SET\GAMS-files\UCM_h.gms
     2      127 GDXIN          1     127  H:\My Documents\Python Scripts\dispa-s
                                          et\Dispa-SET\GAMS-files\Inputs.gdx


COMPILATION TIME     =        0.452 SECONDS      4 MB  24.3.3 r48116 WEX-WEI


USER: DG Joint Research Centre                       W141202:1041CO-WIN
      European Commission                                        DC9812


**** FILE SUMMARY

Input      H:\My Documents\Python Scripts\dispa-set\Dispa-SET\GAMS-files\UCM_h.g
           ms
Output     H:\My Documents\Python Scripts\dispa-set\Dispa-SET\GAMS-files\UCM_h.l
           st

**** USER ERROR(S) ENCOUNTERED
